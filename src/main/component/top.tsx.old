import * as React from "react";
import { TodoStore, todoStore } from "../store/TodoStore";
import { List } from "./Todo/list";
import { TodoForm } from "./Todo/form";
const Dropzone = require("react-dropzone");

import { todoActionCreator,TodoActionCreator } from "../actionCreator/TodoCreator";
class ActionCreatorWrapper {
  props
  addTodo(text: string) {
    this.props.todoActionCreator!.add(text)
  }
}


class TopMixin extends React.Component<{
  todoStore?: TodoStore,
  todoActionCreator?: TodoActionCreator,
}, any> implements ActionCreatorWrapper {
  addTodo: () => void;
  static defaultProps = {
    todoStore: todoStore,
    todoActionCreator: todoActionCreator
  }
  constructor(props) {
    super(props);
    this.onChangeStore = this.onChangeStore.bind(this);
  }
  onChangeStore() {
    this.forceUpdate();
  }
  componentDidMount() {
    this.props.todoStore!.addChangeListener(this.onChangeStore);
  }

  render() {
    return (
      <div>
        <Dropzone />
        <List todos={this.props.todoStore!.findAll()}/>
        <TodoForm addTodo={this.addTodo.bind(this)}/>
      </div>
    )
  }
}

function applyMixins(derivedCtor: any, baseCtors: any[]) {
    baseCtors.forEach(baseCtor => {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
            derivedCtor.prototype[name] = baseCtor.prototype[name];
        });
    });
}

applyMixins(TopMixin, [ActionCreatorWrapper])

class ActionCreatorHOC {
  constructor(private todoActionCreator) {

  }
  static Factory() {
    return new ActionCreatorHOC(todoActionCreator);
  }
  addTodo(text: string) {
    console.log(this)
    this.todoActionCreator!.add(text)
  }
}

const hoc = (actions: { actionCreator: ActionCreatorHOC }) => {
  const { actionCreator } = actions;
  const { addTodo } = actionCreator;
   return class Top extends React.Component<{
    todoStore?: TodoStore }, any> {
    static defaultProps = {
      todoStore: todoStore,
    }
    constructor(props) {
      super(props);
      this.onChangeStore = this.onChangeStore.bind(this);
    }
    onChangeStore() {
      this.forceUpdate();
    }
    componentDidMount() {
      this.props.todoStore!.addChangeListener(this.onChangeStore);
    }

    render() {
      return (
        <div>
          <Dropzone />
          <List todos={this.props.todoStore!.findAll()}/>
          <TodoForm addTodo={addTodo.bind(this)}/>
        </div>
      )
    }
  }
}

export const Top = hoc({ actionCreator: ActionCreatorHOC.Factory() })